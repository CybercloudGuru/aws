Parameters:
  NameOfService:
    Description: "The name of the service this stack will be used for"
    Type: String
  KeyName:
    Description: "Name of an existing EC2 keypair to enable SSH access into the server"
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/28
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-1853ac65
    us-west-1:
      AMI: ami-bf5540df
    eu-west-1:
      AMI: ami-3bfab942
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-south-1:
      AMI: ami-0217a85e28e625474
Resources:
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: Installing httpd and php to run a webserver
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content:
                <?php print "Hello World, live cfn template is here!"; ?>
              mode: "000644"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap: # Intrinsic function to use mappings
          - RegionMap  # Name of the mapping
          - !Ref AWS::Region # First Level Key, Psuedo parameter here to get the region name
          - AMI # Second Level Key in RegionMap mapping
      Tags:
        - Key: Name
          Value: !Ref NameOfService
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      SecurityGroups:
        - !Ref sshSecurityGroup # Multiple resource
  sshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Enable port 22 to specific IP and port 80 to the public"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
Outputs: # get access to the output like EC2 public dns name here.
  Website:
    Description: The public DNS for the EC2 instance
    Value: !GetAtt
      - Ec2Instance
      - PublicDnsName
  IPurl:
    Description: The public IP for the EC2 instance
    Value: !GetAtt
      - Ec2Instance
      - PublicIp
